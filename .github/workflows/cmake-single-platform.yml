name: CMake and CTest verification for Release

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Google Benchmark
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/include
          /usr/local/lib/libbenchmark.a
          /usr/local/lib/libbenchmark_main.a
        key: ${{ runner.os }}-google-benchmark-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-google-benchmark-

      # Install dependencies
    - name: Install gtest dependency
      run: sudo apt-get update && sudo apt-get install -y cmake libgtest-dev

    - name: Build Google Benchmark
      run: |
        if ! command -v benchmark_main; then
          git clone https://github.com/google/benchmark.git
          cd benchmark
          cmake -E make_directory "build"
          cmake -E chdir "build" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../
          cmake --build "build" --config Release
          sudo cmake --build "build" --config Release --target install
        fi
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      run: ctest -V -C ${{env.BUILD_TYPE}}

